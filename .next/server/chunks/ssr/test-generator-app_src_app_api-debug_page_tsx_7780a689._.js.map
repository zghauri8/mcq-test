{"version":3,"sources":["turbopack:///[project]/test-generator-app/src/app/api-debug/page.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState } from \"react\";\r\n\r\ninterface ApiTestResult {\r\n  name: string;\r\n  url: string;\r\n  method: string;\r\n  status: number | string;\r\n  statusText: string;\r\n  success: boolean;\r\n  contentType: string | null;\r\n  data: unknown;\r\n  error: string | null;\r\n  rawResponse: string | null;\r\n}\r\n\r\nexport default function ApiDebugPage() {\r\n  const [results, setResults] = useState<ApiTestResult[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const testAllApis = async () => {\r\n    setLoading(true);\r\n    setResults([]);\r\n\r\n    const baseUrl = \"http://72.60.41.227:5000\";\r\n    const testCases = [\r\n      {\r\n        name: \"Generate Test API\",\r\n        method: \"POST\",\r\n        url: `${baseUrl}/generate_test`,\r\n        body: {\r\n          user_id: \"123456\",\r\n          trait: \"Communication\",\r\n        },\r\n      },\r\n      {\r\n        name: \"Get MCQs API\",\r\n        method: \"GET\",\r\n        url: `${baseUrl}/get_mcqs/123456`,\r\n        body: null,\r\n      },\r\n      {\r\n        name: \"Submit Answers API\",\r\n        method: \"POST\",\r\n        url: `${baseUrl}/submit_answers`,\r\n        body: {\r\n          user_id: \"123456\",\r\n          answers: {\r\n            \"1\": \"Strongly Agree\",\r\n            \"2\": \"Agree\",\r\n            \"3\": \"Neutral\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        name: \"Get Results API\",\r\n        method: \"GET\",\r\n        url: `${baseUrl}/get_results/123456`,\r\n        body: null,\r\n      },\r\n    ];\r\n\r\n    const testResults = [];\r\n\r\n    for (const testCase of testCases) {\r\n      try {\r\n        console.log(`\\nüöÄ Testing: ${testCase.name}`);\r\n        console.log(`üì° URL: ${testCase.url}`);\r\n        console.log(`üìã Method: ${testCase.method}`);\r\n        if (testCase.body) {\r\n          console.log(`üì¶ Body:`, testCase.body);\r\n        }\r\n\r\n        // Try direct API call first\r\n        const response = await fetch(testCase.url, {\r\n          method: testCase.method,\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: testCase.body ? JSON.stringify(testCase.body) : undefined,\r\n        });\r\n\r\n        console.log(`üìä Response Status: ${response.status}`);\r\n        console.log(`üìä Response OK: ${response.ok}`);\r\n        console.log(`üìã Content-Type: ${response.headers.get(\"content-type\")}`);\r\n\r\n        const result: ApiTestResult = {\r\n          name: testCase.name,\r\n          url: testCase.url,\r\n          method: testCase.method,\r\n          status: response.status,\r\n          statusText: response.statusText,\r\n          success: response.ok,\r\n          contentType: response.headers.get(\"content-type\"),\r\n          data: null,\r\n          error: null,\r\n          rawResponse: null,\r\n        };\r\n\r\n        if (response.ok) {\r\n          const contentType = response.headers.get(\"content-type\");\r\n          if (contentType && contentType.includes(\"application/json\")) {\r\n            result.data = await response.json();\r\n            console.log(`‚úÖ JSON Data:`, result.data);\r\n          } else {\r\n            result.rawResponse = await response.text();\r\n            console.log(\r\n              `‚ö†Ô∏è Non-JSON Response:`,\r\n              result.rawResponse.substring(0, 500)\r\n            );\r\n          }\r\n        } else {\r\n          result.rawResponse = await response.text();\r\n          console.log(\r\n            `‚ùå Error Response:`,\r\n            result.rawResponse.substring(0, 500)\r\n          );\r\n        }\r\n\r\n        testResults.push(result);\r\n      } catch (err) {\r\n        const error = err instanceof Error ? err : new Error('Unknown error');\r\n        console.error(`‚ùå ${testCase.name} failed:`, error);\r\n        testResults.push({\r\n          name: testCase.name,\r\n          url: testCase.url,\r\n          method: testCase.method,\r\n          status: \"ERROR\",\r\n          statusText: \"Network Error\",\r\n          success: false,\r\n          contentType: null,\r\n          data: null,\r\n          error: error.message,\r\n          rawResponse: null,\r\n        });\r\n      }\r\n    }\r\n\r\n    setResults(testResults);\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-100 py-8\">\r\n      <div className=\"max-w-6xl mx-auto px-4\">\r\n        <div className=\"bg-white rounded-lg shadow-lg p-8\">\r\n          <h1 className=\"text-3xl font-bold text-gray-800 mb-6\">\r\n            üîç API Debug Console\r\n          </h1>\r\n\r\n          <div className=\"mb-6\">\r\n            <button\r\n              onClick={testAllApis}\r\n              disabled={loading}\r\n              className=\"px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50\"\r\n            >\r\n              {loading ? \"Testing APIs...\" : \"Test All APIs\"}\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"space-y-4\">\r\n            {results.map((result, index) => (\r\n              <div\r\n                key={index}\r\n                className={`p-4 rounded-lg border-2 ${\r\n                  result.success\r\n                    ? \"bg-green-50 border-green-200\"\r\n                    : \"bg-red-50 border-red-200\"\r\n                }`}\r\n              >\r\n                <div className=\"flex items-center justify-between mb-2\">\r\n                  <h3 className=\"text-lg font-semibold\">{result.name}</h3>\r\n                  <span\r\n                    className={`px-3 py-1 rounded-full text-sm font-semibold ${\r\n                      result.success\r\n                        ? \"bg-green-100 text-green-800\"\r\n                        : \"bg-red-100 text-red-800\"\r\n                    }`}\r\n                  >\r\n                    {result.success ? \"SUCCESS\" : \"FAILED\"}\r\n                  </span>\r\n                </div>\r\n\r\n                <div className=\"text-sm text-gray-600 space-y-1\">\r\n                  <p>\r\n                    <strong>URL:</strong> {result.url}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Method:</strong> {result.method}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Status:</strong> {result.status} {result.statusText}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Content-Type:</strong> {result.contentType || \"N/A\"}\r\n                  </p>\r\n\r\n                  {result.data != null && (\r\n                    <div>\r\n                      <p>\r\n                        <strong>JSON Data:</strong>\r\n                      </p>\r\n                      <pre className=\"bg-gray-100 p-2 rounded text-xs overflow-auto\">\r\n                        {JSON.stringify(result.data, null, 2)}\r\n                      </pre>\r\n                    </div>\r\n                  )}\r\n\r\n                  {result.rawResponse && (\r\n                    <div>\r\n                      <p>\r\n                        <strong>Raw Response:</strong>\r\n                      </p>\r\n                      <pre className=\"bg-gray-100 p-2 rounded text-xs overflow-auto max-h-32\">\r\n                        {result.rawResponse.substring(0, 1000)}\r\n                        {result.rawResponse.length > 1000 && \"...\"}\r\n                      </pre>\r\n                    </div>\r\n                  )}\r\n\r\n                  {result.error && (\r\n                    <p className=\"text-red-600\">\r\n                      <strong>Error:</strong> {result.error}\r\n                    </p>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <div className=\"mt-8 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\r\n            <h3 className=\"text-lg font-semibold text-blue-800 mb-2\">\r\n              üìã Instructions\r\n            </h3>\r\n            <ul className=\"text-sm text-blue-700 space-y-1\">\r\n              <li>‚Ä¢ Click &quot;Test All APIs&quot; to test all endpoints</li>\r\n              <li>‚Ä¢ Check the browser console for detailed logs</li>\r\n              <li>‚Ä¢ Green = API returned valid JSON</li>\r\n              <li>‚Ä¢ Red = API failed or returned HTML/error</li>\r\n              <li>‚Ä¢ This will show you exactly what each API returns</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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"}